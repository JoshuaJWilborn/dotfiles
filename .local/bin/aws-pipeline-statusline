#!/bin/bash
# env variables to see: pipe delimited list of service names as $services
# the $profile you want to use
basepath=/tmp/aws-pipeline-status
if [ ! -d $basepath ]; then
  mkdir $basepath 
fi
if [ ! -f $1 ]; then
  config="pipeline.json"
fi
services="aws-adapter|userfilesystem-adapter"
profile=eng-tooling
red=f00
redicon=●
green=#0F0
greenicon=●
region=us-east-1;
stage=Development
services=($services);
failed=0
succeeded=0

IFS=$'\n'; set -f
if [ ! -f "$home/$config" ]; then
  exit 1
fi
for service in `cat $HOME/$config | jq -cr '.services[] | "\(.name) \(.stage) \(.region) \(.profile)"'`
do
  IFS=" ";
  read -r name stage region profile <<< "$service"
  result=`aws codepipeline get-pipeline-state --name $name --region=$region --profile=$profile --output json | jq ".stageStates[] | select(.stageName == \"$stage\") | .latestExecution.status"`
  if [ -f "$basepath/$name" ]; then
    prev=`cat $basepath/$name`
  fi
  if [ $result == \"Failed\" ]; then
    failed=$(($failed + 1))
  else
    succeeded=$(($succeeded + 1))
  fi
  if [ $prev != $result ]; then
    if [ $result == \"Failed\" ]; then
      urgency=critical
      time=0
    else
      urgency=low
      time=5000
    fi
    notify-send -t $time -u $urgency $name-status "$name is $result"
  fi
  `echo $result > $basepath/$name`
done

if [ "$failed" -gt 0 ]; then
  result="%{F$red}$redicon $failed "
fi
if [ $((succeeded)) > 0 ]; then
  result="$result%{F$green}$greenicon $succeeded"
fi
echo $result
